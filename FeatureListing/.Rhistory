blue2red <- colorRampPalette(c("red","green","blue"), bias = 1)
image(cosine(t(tmp))[,100:1], col=blue2red(21)[21:1], xaxt = "n", yaxt = "n")
blue2red <- colorRampPalette(c("red","green","blue"), bias = 5)
image(cosine(t(tmp))[,100:1], col=blue2red(21)[21:1], xaxt = "n", yaxt = "n")
blue2red <- colorRampPalette(c("red","green","blue"), bias = 2)
image(cosine(t(tmp))[,100:1], col=blue2red(21)[21:1], xaxt = "n", yaxt = "n")
blue2red <- colorRampPalette(c("red","green","blue"), bias = 1.5)
image(cosine(t(tmp))[,100:1], col=blue2red(21)[21:1], xaxt = "n", yaxt = "n")
tmp[,11:14] <- tmp[,1:4]
image(cosine(t(tmp))[,100:1], col=blue2red(21)[21:1], xaxt = "n", yaxt = "n")
image(cosine(t(tmp))[,100:1], col=viridis(9), xaxt = "n", yaxt = "n")
library(matlab)
library(ocean)
jet.colors <- function(n, alpha=1) {
if(n > 0) {
if(length(alpha) != 1 & length(alpha) != n) {
print('Warning: using only first alpha value')
alpha <- alpha[1]
}
if(length(alpha) == 1) {
alpha <- rep(alpha, n)
}
## TODO Include alpha values
return(colorRampPalette(c('#000066', 'blue', 'cyan', 'yellow',
'red', '#660000'))(n))
} else {
## Return an empty character string if they requested nothing.
character()
}
}
}image(cosine(t(tmp))[,100:1], col = jet.colors(21), xaxt = "n", yaxt = "n")
jet.colors <- function(n, alpha=1) {
+   if(n > 0) {
+     if(length(alpha) != 1 & length(alpha) != n) {
+       print('Warning: using only first alpha value')
+       alpha <- alpha[1]
+     }
+     if(length(alpha) == 1) {
+       alpha <- rep(alpha, n)
+     }
+     ## TODO Include alpha values
+     return(colorRampPalette(c('#000066', 'blue', 'cyan', 'yellow',
+                               'red', '#660000'))(n))
+   } else {
+     ## Return an empty character string if they requested nothing.
+     character()
+   }
+ }
jet.colors <- function(n, alpha=1) {
if(n > 0) {
if(length(alpha) != 1 & length(alpha) != n) {
print('Warning: using only first alpha value')
alpha <- alpha[1]
}
if(length(alpha) == 1) {
alpha <- rep(alpha, n)
}
## TODO Include alpha values
return(colorRampPalette(c('#000066', 'blue', 'cyan', 'yellow',
'red', '#660000'))(n))
} else {
## Return an empty character string if they requested nothing.
character()
}
}
image(cosine(t(tmp))[,100:1], col = jet.colors(21), xaxt = "n", yaxt = "n")
image(trud[,100:1])
image(trud[,100:1], col = jet.colors(21))
tmp1 <- cosine(t(tmp))
cor(tmp1[lower.tri(tmp1)], trud[lower.tri(trud)])
tmp2 <- add.noise(tmp1)
cor(tmp2[lower.tri(tmp2)], trud[lower.tri(trud)])
cor(tmp2[lower.tri(tmp2, n = 2)], trud[lower.tri(trud)])
cor(tmp2[lower.tri(tmp2, ns = 2)], trud[lower.tri(trud)])
cor(tmp2[lower.tri(tmp2, 2)], trud[lower.tri(trud)])
tmp2 <- add.noise(tmp1, n=2)
cor(tmp2[lower.tri(tmp2)], trud[lower.tri(trud)])
tmp2 <- add.noise(tmp1, n=3)
cor(tmp2[lower.tri(tmp2)], trud[lower.tri(trud)])
tmp2 <- add.noise(tmp1, n=4)
cor(tmp2[lower.tri(tmp2)], trud[lower.tri(trud)])
thrpat
thrdpat
thrpat <- rep(0, times = 11)
for(i in c(1:11)){
tmp1 <- add.noise(cosine(t(tmp)), (i-1) * .4)
thrpat[i] <- cor(tmp1[lower.tri(tmp1)], trud[lower.tri(trud)])}
plot(thrpat, type = "o", ylim = c(0,1), pch = 16)
rm(thrdpat)
thrdmat <- tmp
image(tmp)
tmp[,1:5] <- thrdmat[,1]
tmp[,6:10] <- thrdmat[,4]
image(tmp)
tmp[,6:10] <- -1 * thrdmat[,4]
image(tmp)
tange(tmp)
range(tmp)
for(i in c(11:20)) tmp[,i] <- (runif(100) * 2) - 1
range(tmp)
image(tmp)
image(cosine(t(tmp))[,100:1])
image(tmp)
image(cosine(t(tmp))[,100:1])
tmppat <- rep(0, times = 11)
for(i in c(1:11)){
tmp1 <- add.noise(cosine(t(tmp)), (i-1) * .4)
tmppat[i]  <- cor(tmp1[lower.tri(tmp1)], trud[lower.tri(trud)])}
plot(tmppat, type = "o", ylim = c(0,1), pch = 16)
lines(thrpat, type = "o", pch = 16, col = 2)
image(thrdmat)
onedmat <- tmp
tmp <- thrdmat
tmp <- thrdmat[,c(c(1,4,7), c(2,5,8), c(3,6,9), 10:20)]
image(tmp)
tmp <- thrdmat[,c(c(1,4,7,10), c(2,5,8,11), c(3,6,9,12), 13:20)]
image(tmp)
image(thrdmat)
tmp <- thrdmat[,c(c(1,4,7,7), c(2,5,8,8), c(3,6,9,9), 13:20)]
image(tmp)
for(i in c(13:20)) tmp[,i] <- (runif(100)*2)-1
image(tmp)
for(i in c(13:20)) tmp[,i] <- ((runif(100)*2)-1) * runif(1)
image(tmp)
image(cosine(t(tmp)))
image(cosine(t(tmp[,1:12])))
image(cosine(t(tmp)), col=viridis(9))
image(cosine(t(tmp)), col=viridis(9)[9:1])
image(cosine(t(tmp[,1:12])), col=viridis(9)[9:1])
image(cosine(t(tmp)), col=viridis(9)[9:1])
tmp1 <- cosine(t(tmp))
lt <- function(m){m[lower.tri(m)]}
cor(lt(tmp1), lt(trud))
image(cosine(t(tmp))[,100:1], col=viridis(9))
image(trud[,100:1], col=viridis(9))
image(cosine(t(tmp))[,100:1], col=viridis(9))
image(tmp)
image(t(tmp), col = ciridis(9))
image(t(tmp), col = viridis(9))
tmp(cbind(tmp, matrix(0, 100,4))
)
tmp<-cbind(tmp, matrix(0, 100,4))
for(i in c(21:24)) tmp[,i] <- (runif(100)*2 - 1) * runif(1)
image(tmp)
image(t(tmp), col = viridis(9))
image(cosine(t(tmp))[,100:1], col=viridis(9))
tmp1 <- cosine(t(tmp))
cor(lt(tmp1), lt(trud))
for(i in c(13:24)) tmp[,i] <- 0
image(cosine(t(tmp))[,100:1], col=viridis(9))
tmp1 <- cosine(t(tmp))
add.noise
image(cosine(t(add.noise(tmp, 5)))[,100:1], col=viridis(9))
image(cosine(t(add.noise(tmp, 1)))[,100:1], col=viridis(9))
image(cosine(t(add.noise(tmp, .2)))[,100:1], col=viridis(9))
image(cosine(t(add.noise(tmp, .4)))[,100:1], col=viridis(9))
image(cosine(t(add.noise(tmp, .6)))[,100:1], col=viridis(9))
cor(lt(cosine(t(add.noise(tmp, .6)))), lt(trud))
cor(lt(cosine(t(add.noise(tmp, 2)))), lt(trud))
cor(lt(cosine(t(add.noise(tmp, 3)))), lt(trud))
thrdmat <- tmp
image(tmp)
image(tmp, col = blue2red(21))
blue2red <- colorRampPalette(c("blue","gray","red"))
image(tmp, col = blue2red(21))
tmp[1,1]
image(t(tmp), col = blue2red(21))
tmp[,1:6] <- onedmat[,c(1,1,1,1,1,1)]
tmp[,7:12] <- -1 * onedmat[,c(1,1,1,1,1,1)]
image(t(tmp), col = blue2red(21))
cor(lt(cosine(t(add.noise(tmp, .6)))), lt(trud))
cor(lt(cosine(t(add.noise(tmp, .3)))), lt(trud))
cor(lt(cosine(t(add.noise(tmp, 3)))), lt(trud))
fstdmat <- tmp
tmp[,1:6] <- thrdmat[,c(5,5,5,5,5,5)]
tmp[,7:12] <- -1 * thrdmat[,c(5,5,5,5,5,5)]
image(t(tmp), col = blue2red(21))
cor(lt(cosine(t(add.noise(tmp, .6)))), lt(trud))
cor(lt(cosine(t(add.noise(tmp, 3)))), lt(trud))
secdmat <- tmp
tmp[,1:6] <- thrdmat[,c(9,9,9,9,9,9)]
tmp[,7:12] <- -1 * thrdmat[,c(9,9,9,9,9,9)]
image(t(tmp), col = blue2red(21))
cor(lt(cosine(t(add.noise(tmp, .6)))), lt(trud))
cor(lt(cosine(t(add.noise(tmp, 3)))), lt(trud))
thirddmat <- tmp
image(thrdmat)
image(t(thrdmat), col = blue2red(21))
alldmat <- thrdmat)
alldmat <- thrdmat
rm(thrdmat)
image(t(bmat), col = blue2red(21))
tmp[,1:12] <- bmat[,c(1,1,1,1,1,1,4,4,4,4,4,4)]
image(t(tmp), col = blue2red(21))
dim(tmp)
tmp[,13:24] <- 0
tmp <- (tmp * 2) -1
tmp[,13:24] <- 0
image(t(tmp), col = blue2red(21))
cor(lt(cosine(t(add.noise(tmp, 3)))), lt(trud))
cor(lt(cosine(t(add.noise(tmp, 5)))), lt(trud))
cor(lt(cosine(t(add.noise(tmp, 10)))), lt(trud))
cor(lt(cosine(t(add.noise(tmp, .1)))), lt(trud))
cor(lt(cosine(t(add.noise(tmp, 0)))), lt(trud))
cor(lt(cosine(t(add.noise(alldmat, 0)))), lt(trud))
cor(lt(cosine(t(add.noise(fstdmat, 0)))), lt(trud))
plot(tru[,1], fstdmat[,1])
binmat <- tmp
rm(bmat)
plot(tru[,2], tru[,1]+tru[,2])
plot(tru[,2], tru[,1]+tru[,2], col = pcols, pch = 16)
par(cex = 16)
par(col = pcols)
par(cex = 1)
par(pch = 1)
par(pch = 16)
plot(tru[,2], tru[,1]+tru[,2], col = pcols)
plot(tru[,1]+tru[,2], col = pcols)
tmp <- tru
tmp[,1] <-tmp[,1] + tmp[,2]
image(cosine(t(tmp)), col = blue2red(21))
image(cosine(t(tmp))[,100:1], col = blue2red(21))
tmp <- tru
image(cosine(t(tmp))[,100:1], col = blue2red(21))
image(cosine(t(tmp))[,100:1], col = viridis(9))
tmp[,1] <-tmp[,1] + tmp[,2]
image(cosine(t(tmp))[,100:1], col = viridis(9))
tmp <- tru
tmp[,1] <-tmp[,1] + tmp[,2] + runif(100)/5
image(cosine(t(tmp))[,100:1], col = viridis(9))
tmp[,1] <-tru[,1] + tru[,2] + runif(100)/2
image(cosine(t(tmp))[,100:1], col = viridis(9))
scatterplot3d(tmp[,1], tmp[,2], tmp[,3], color=pcols)
image(cosine(t(tmp))[,100:1], col = viridis(9))
image(cosine(t(tru))[,100:1], col = viridis(9))
mcors <- matrix(0,5,11)
for(i in c(1:11)){
tmp1 <- cosine(t(add.noise(binmat, (i-1) * 0.5)))
mcros[1,i] <- cor(lt(tmp1), lt(trud))}
for(i in c(1:11)){
tmp1 <- cosine(t(add.noise(binmat, (i-1) * 0.5)))
mcors[1,i] <- cor(lt(tmp1), lt(trud))}
plot(mcors[1,], type = "o")
plot(mcors[1,], type = "o", ylim = c(0,1))
for(i in c(1:11)){
tmp1 <- cosine(t(add.noise(fstdmat, (i-1) * 0.5)))
mcors[2,i] <- cor(lt(tmp1), lt(trud))}
lines(mcors[1,], type = "o", col = 2)
image(t(binmat), col = blue2red(21))
image(t(fstdmat), col = blue2red(21))
cor(lt(cosine(t(fstdmat[1:50,]))), lt(cosine(t(tru[1:50,]))))
tmp <- tru
plot(tmp[,1])
tmp[1:25,1] <- tmp[1:25,1] - runif(25)/3
plot(tmp[,1], col = pcols)
tmp[76:100,1] <- tmp[1:25,1] + runif(25)/3
plot(tmp[,1], col = pcols)
tmp <- tru
tmp[1:25,1] <- tmp[1:25,1] - runif(25)/3
tmp[76:100,1] <- tmp[76:100,1] + runif(25)/3
plot(tmp[,1], col = pcols)
tmp <- tru
tmp[1:25,1] <- tmp[1:25,1] - runif(25)/\2
tmp[1:25,1] <- tmp[1:25,1] - runif(25)/
[}
tmp[1:25,1] <- tmp[1:25,1] - runif(25)/2
tmp[76:100,1] <- tmp[76:100,1] + runif(25)/2
plot(tmp[,1], col = pcols)
image(t(cosine(tmp))[,100:1], col = viridis(9))
dim(tmp)
image(cosine(t(tmp))[,100:1], col = viridis(9))
image(cosine(t(tmp[,1]))[,100:1], col = viridis(9))
image(cosine(t(tmp))[,100:1], col = viridis(9))
image(as.matrix(dist(tmp))[,100:1], col = viridis(9))
image(as.matrix(dist(tmp))[,100:1], col = viridis(9)[9:1])
image(as.matrix(dist(tmp[,1]))[,100:1], col = viridis(9)[9:1])
tmp1 <- as.matrix(dist(tmp[,1]))
cor(lt(tmp1), lt(as.matrix(dist(tmp))))
tmp1 <- as.matrix(dist(binmat))
cor(lt(tmp1), lt(as.matrix(dist(tmp))))
cor(lt(tmp1), lt(as.matrix(dist(tru))))
tmp1 <- as.matrix(dist(onedmat))
cor(lt(tmp1), lt(as.matrix(dist(tru))))
tmp1 <- as.matrix(dist(alldmat))
cor(lt(tmp1), lt(as.matrix(dist(tru))))
tmp1 <- add.noise(as.matrix(dist(alldmat)), 3)
cor(lt(tmp1), lt(as.matrix(dist(tru))))
tmp1 <- add.noise(as.matrix(dist(alldmat)), 5)
cor(lt(tmp1), lt(as.matrix(dist(tru))))
tmp1 <- add.noise(as.matrix(dist(binmat)), 5)
cor(lt(tmp1), lt(as.matrix(dist(tru))))
tmp1 <- add.noise(as.matrix(dist(binmat)), 10)
cor(lt(tmp1), lt(as.matrix(dist(tru))))
tmp1 <- add.noise(as.matrix(dist(binmat)), 1)
cor(lt(tmp1), lt(as.matrix(dist(tru))))
tmp1 <- add.noise(as.matrix(dist(binmat)), 0)
cor(lt(tmp1), lt(as.matrix(dist(tru))))
tmp1 <- add.noise(as.matrix(dist(onedmat)), 0)
cor(lt(tmp1), lt(as.matrix(dist(tru))))
tmp1 <- add.noise(as.matrix(dist(onedmat)), 5)
cor(lt(tmp1), lt(as.matrix(dist(tru))))
tmp1 <- add.noise(as.matrix(dist(fstdmat)), 5)
cor(lt(tmp1), lt(as.matrix(dist(tru))))
image(onedmat)
dim(onedmat)
rm(onedmat)
tmp1 <- add.noise(as.matrix(dist(fstdmat)), 10)
rm(onedmat)
cor(lt(tmp1), lt(as.matrix(dist(tru))))
tmp1 <- add.noise(as.matrix(dist(fstdmat)), 1)
cor(lt(tmp1), lt(as.matrix(dist(tru))))
tmp1 <- add.noise(as.matrix(dist(binmat)), 1)
cor(lt(tmp1), lt(as.matrix(dist(tru))))
tmp1 <- add.noise(as.matrix(dist(binmat)), 10)
cor(lt(tmp1), lt(as.matrix(dist(tru))))
tmp1 <- add.noise(as.matrix(dist(alldmat)), 10)
cor(lt(tmp1), lt(as.matrix(dist(tru))))
tmp1 <- add.noise(as.matrix(dist(decdmat)), 10)
tmp1 <- add.noise(as.matrix(dist(secdmat)), 10)
cor(lt(tmp1), lt(as.matrix(dist(tru))))
tmp1 <- add.noise(as.matrix(dist(secdmat)), 1)
cor(lt(tmp1), lt(as.matrix(dist(tru))))
bindmat <- binmat
rm(binmat)
for(i in c(1:11)){
tmp1[1,i] <- add.noise(as.matrix(dist(bindmat)), i-1)
mcors[}
for(i in c(1:11)){
tmp1 <- add.noise(as.matrix(dist(bindmat)), i-1)
mcors[1,i] <- cor(lt(as.matrix(dist(tru))), lt(tmp1))}
plot(c(1:10), mcors[1,], type = "o", ylim = c(0,1))
plot(c(0:10), mcors[1,], type = "o", ylim = c(0,1))
for(i in c(1:11)){
tmp1 <- add.noise(as.matrix(dist(fstdmat)), i-1)
mcors[2,i] <- cor(lt(as.matrix(dist(tru))), lt(tmp1))}
plot(c(0:10), mcors[2,], type = "o", col = 2)
plot(c(0:10), mcors[1,], type = "o", ylim = c(0,1))
lines(c(0:10), mcors[2,], type = "o", col = 2)
for(i in c(1:11)){
tmp1 <- add.noise(as.matrix(dist(secdmat)), i-1)
mcors[3,i] <- cor(lt(as.matrix(dist(tru))), lt(tmp1))}
lines(c(0:10), mcors[2,], type = "o", col = 2, lty = 2)
lines(c(0:10), mcors[3,], type = "o", col = 2, lty = 2)
for(i in c(1:11)){
tmp1 <- add.noise(as.matrix(dist(thirddmat)), i-1)
mcors[4,i] <- cor(lt(as.matrix(dist(tru))), lt(tmp1))}
lines(c(0:10), mcors[4,], type = "o", col = 2, lty = 3)
for(i in c(1:11)){
tmp1 <- add.noise(as.matrix(dist(alldmat)), i-1)
mcors[5,i] <- cor(lt(as.matrix(dist(tru))), lt(tmp1))}
lines(c(0:10), mcors[5,], type = "o", col = 3)
legend(7,1,lty = c(1,1,2,3,1), col = c(1,2,2,2,3), legend = c("Binary","1sr only","2nd only","3rd only","All"), cex = 0.7, bty = "n")
par(mar = c(4,4,2,2), oma = c(2,2,2,2))
plot(c(0:10), mcors[1,], type = "o", ylim = c(0,1), xlab = "Noise", ylab = "Correlation")
lines(c(0:10), mcors[2,], type = "o", col = 2)
lines(c(0:10), mcors[3,], type = "o", col = 2, lty = 2)
lines(c(0:10), mcors[4,], type = "o", col = 2, lty = 3)
lines(c(0:10), mcors[5,], type = "o", col = 3)
legend(7,1,lty = c(1,1,2,3,1), col = c(1,2,2,2,3), legend = c("Binary","1sr only","2nd only","3rd only","All"), bty = "n")
plot(c(0:10), mcors[1,], type = "o", ylim = c(0,1), xlab = "Noise", ylab = "Correlation")
lines(c(0:10), mcors[2,], type = "o", col = 2)
lines(c(0:10), mcors[3,], type = "o", col = 2, lty = 2)
lines(c(0:10), mcors[4,], type = "o", col = 2, lty = 3)
lines(c(0:10), mcors[5,], type = "o", col = 3)
legend(7,1,lty = c(1,1,2,3,1), col = c(1,2,2,2,3), legend = c("Binary","1st only","2nd only","3rd only","All"), bty = "n")
title("Simulated RSA with different neural codes")
plot.srsa <- function(){
plot(c(0:10), mcors[1,], type = "o", ylim = c(0,1), xlab = "Noise", ylab = "Correlation")
lines(c(0:10), mcors[2,], type = "o", col = 2)
lines(c(0:10), mcors[3,], type = "o", col = 2, lty = 2)
lines(c(0:10), mcors[4,], type = "o", col = 2, lty = 3)
lines(c(0:10), mcors[5,], type = "o", col = 3)
legend(7,1,lty = c(1,1,2,3,1), col = c(1,2,2,2,3), legend = c("Binary","1st only","2nd only","3rd only","All"), bty = "n")
title("Simulated RSA with different neural codes")}
plot.srsa()
trud <- as.matrix(dist(tru))
image(trud[,100:1])
image(trud[,100:1], col = blue2red(100))
image(trud[,100:1], col = blue2red(100)[100:1])
image(trud[,100:1], col = viridis(9))
image(trud[,100:1], col = viridis(11))
image(trud[,100:1], col = viridis(11)[11:1])
image(trud[,100:1], col = viridis(11)[11:1], xaxt = "n", yaxt="n")
image(trud[,100:1], col = jet.colors(11)[11:1], xaxt = "n", yaxt="n")
image(trud[,100:1], col = heat(11)[11:1], xaxt = "n", yaxt="n")
image(trud[,100:1], col = heat.colors(11)[11:1], xaxt = "n", yaxt="n")
image(trud[,100:1], col = blue2red(11)[11:1], xaxt = "n", yaxt="n")
image(as.matrix(dist(bindmat))[,100:1], col = blue2red(11)[11:1], xaxt = "n", yaxt="n")
dim(bindmat)
range(bindmat)
bindmat[,7:12] <- bindmat[,13:18]
bindmat[,13:24] <- 0
image(bindmat)
image(as.matrix(dist(bindmat))[,100:1], col = blue2red(11)[11:1], xaxt = "n", yaxt="n")
image(t(bindmat))
image(as.matrix(dist(bindmat))[,100:1], col = blue2red(11)[11:1], xaxt = "n", yaxt="n")
image(as.matrix(dist(fstdmat))[,100:1], col = blue2red(11)[11:1], xaxt = "n", yaxt="n")
image(as.matrix(dist(secdmat))[,100:1], col = blue2red(11)[11:1], xaxt = "n", yaxt="n")
image(as.matrix(dist(thirddmat))[,100:1], col = blue2red(11)[11:1], xaxt = "n", yaxt="n")
image(as.matrix(dist(alldmat))[,100:1], col = blue2red(11)[11:1], xaxt = "n", yaxt="n")
image(t(bindmat), col = blue2red(11), xaxt = "n", yaxt="n")
bindmat[,7:12] <- -1 * bindmat[,1:6]
image(t(bindmat), col = blue2red(11), xaxt = "n", yaxt="n")
image(t(fstdmat), col = blue2red(11), xaxt = "n", yaxt="n")
image(t(secdmat), col = blue2red(11), xaxt = "n", yaxt="n")
image(t(thirddmat), col = blue2red(11), xaxt = "n", yaxt="n")
image(t(alldmat), col = blue2red(11), xaxt = "n", yaxt="n")
plot.srsa()
save.image("C:\\Users\\ttrog\\Box\\Work\\PaperDrafts\\InPreparation\\CoxETALEcogNRSA\\demo.RData")
q()
library(tidyverse)
library(vegan)
library(lsa)
library(ape)
library(RColorBrewer)
setwd("C:\GitHub\GPT3Expts\FeatureListing\") ### replace this with the location of where you save this r notebook
setwd("C:/GitHub/GPT3Expts/FeatureListing")
df <- read.csv("reptiles.csv")
head(df)
feat_mat <- df%>%select('Concept','Feature')%>%group_by(Concept,Feature)%>%summarize(count=n())%>%pivot_wider(id_cols = Concept,names_from = Feature, values_from = count,values_fn = sum, values_fill = 0)
dim(feat_mat)
fmat <- feat_mat
rm(feat_mat)
fmat[1:5,1:5]
row.names(fmat) <- fmat[,1]
tmp <- dmat
tmp <- as.matrix(fmat)
row.names(tmp) <- tmp[,1]
dim(tmp)
dim(fmat)
tmp[1:5,1:5]
tmp <- as.matrix(fmat[,2:dim(fmat)[2]])
tmp[1:5,1:5]
row.names(tmp) <- fmat$Concept
tmp[1:5,1:5]
fmat <- tmp
fmat.cos <- 1 - cosine(t(tmp))
dim(fmat)
dim(fmat.cos)
heatmap(fmat.cos)
ypalette<-brewer.pal(256,"OrRd") ### pick a color palette
mypalette<-brewer.pal(256,"OrRd") ### pick a color palette
heatmap(fmat.cos,xlab="", ylab="", main="Feature dissimilarity matrix",Colv = NA, Rowv = NA,col = mypalette)
plot(as.phylo(hclust(as.dist(fmat.cos))))
plot(as.phylo(hclust(as.dist(fmat.cos))), type = "unrooted")
ls()
heatmap(fmat.cos,xlab="", ylab="", main="Feature dissimilarity matrix",Colv = NA, Rowv = NA,col = jet.colors(20))
heatmap(1 - fmat.cos,xlab="", ylab="", main="Feature dissimilarity matrix",Colv = NA, Rowv = NA,col = jet.colors(20))
fmat.cos[1:5,1:5]
tmp <- fmat.cos
range(tmp[lower.tri(tmp)])
help(lower.tri)
image(tmp)
image(fmat)
ls()
rm(add.noise, alldmat, bindmat, binpat, bvec, df, fstdmat, i, lt, mcors, norm.mat, onedcos, onedpat, onedvec, pcols, plot.srsa, secdmat, thirddmat, thrpat, tmp1, tmp2, tmppat, tru, trud, ypalette)
ls()
dim(fmat)
names(fmat)[fmat[1,]!=0]
names(fmat)
fmat[1:5, 1:5]
summary(fmat)
colnames(fmat)
colnames(fmat)[fmat[1,]!=0]
colnames(fmat)[fmat[2,]!=0]
colnames(fmat)[1:25]
dim(tmp)
plot(as.phylo(hclust(as.dist(tmp), method = "ward.D2")))
plot(as.phylo(hclust(as.dist(tmp), method = "ward.D2")), type = "unrooted")
names(fmat)[fmat[row,names(fmat)=="turtle",]!=0]
names(fmat)[fmat[row.names(fmat)=="turtle",]!=0]
names(fmat)[fmat[row.names(fmat)=="Turtle",]!=0]
row.names(fmat)
row.names(fmat)=="Turtle"
names(fmat)[c(1:10)[fmat[row.names(fmat)=="Turtle"],]!=0]
items <- row.names(fmat)
names(fmat)[fmat[c(1:10)[items=="Turtle"],] !=0]
match("Turtle", items)
names(fmat)[match("Turtle", items),] !=0]
names(fmat)[fmat[match("Turtle", items),] !=0]
sum(fmat[10,])
names(fmat)[fmat[10,] !=0]
colnames(fmat)[fmat[match("Turtle", items),] !=0]
colnames(fmat)[fmat[match("Tortoise", items),] !=0]
sort(colnames(fmat)[fmat[match("Tortoise", items),] !=0])
sort(colnames(fmat)[fmat[match("Turtle", items),] !=0])
dim(df)
ls()
tmp <- read.csv("reptiles.csv")
head(tmp)
fmat %>% tmpselect('Concept','Feature')%>%group_by(Concept,Feature)%>%summarize(count=n())%>%pivot_wider(id_cols = Concept,names_from = Feature, values_from = count,values_fn = sum, values_fill = 0)
fmat <- tmp %>% select('Concept','Feature')%>%group_by(Concept,Feature)%>%summarize(count=n())%>%pivot_wider(id_cols = Concept,names_from = Feature, values_from = count,values_fn = sum, values_fill = 0)
dim(fmat)
flist <- tmp
tmp <- as.matrix(fmat[,2:dim(fmat)[2]])
row.names(tmp) <- fmat$Concept
tmp[1:5,1:5]
fmat <- tmp
fd <- 1 - cosine(d(fmat))
fd <- 1 - cosine(t(fmat))
heatmap(fd)
plot(as.phylo(hclust(as.dist(fd), method = "ward.D2"), type = "unrooted")
)
plot(as.phylo(hclust(as.dist(fd), method = "ward.D2")), type = "unrooted")
dim(fmat)
colSums(fmat)
colSums(fmat)==1
sum(colSums(fmat)==1)
tmp <- fmat[,colSums(fmat)>1]
dim(tmp)
tmpd <- 1 - cosine(t(tmp))
plot(as.phylo(hclust(as.dist(tmpd), method = "ward.D2")), type = "unrooted")
